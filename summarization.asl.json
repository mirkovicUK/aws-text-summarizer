{
    "Comment": "A description of my state machine",
    "StartAt": "Format prompt",
    "States": {
        "Format prompt": {
            "Type": "Pass",
            "Assign": {
                "for_model": "{% 'Please summarize this text: ' & $states.input.text %}"
            },
            "Next": "Summarize text"
        },
        "Summarize text": {
            "Type": "Task",
            "Resource": "arn:aws:states:::bedrock:invokeModel",
            "Arguments": {
                "ModelId": "anthropic.claude-3-haiku-20240307-v1:0",
                "Body": {
                    "temperature": 0.5,
                    "anthropic_version": "bedrock-2023-05-31",
                    "top_p": 1,
                    "max_tokens": 400,
                    "messages": [
                        {
                            "role": "user",
                            "content": [
                                {
                                    "type": "text",
                                    "text": "{% $for_model %}"
                                }
                            ]
                        }
                    ]
                }
            },
            "Assign": {
                "summary": "{% $states.result.Body.content[0].text %}"
            },
            "Next": "Store text summary"
        },
        "Store text summary": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:putItem",
            "Arguments": {
                "TableName": "${TextSummaryTableName}",
                "Item": {
                    "ExecutionArn": {
                        "S": "{% $states.context.Execution.Id %}"
                    },
                    "SummaryText": {
                        "S": "{% $summary %}"
                    },
                    "CreatedDate": {
                        "S": "{% $substring($now(), 0, 10) %}"
                    },
                    "CreatedTimestamp": {
                        "S": "{% $now() %}"
                    },
                    "input_tokens": {
                        "N": "{% $string($states.input.Body.usage.input_tokens) %}"
                    },
                    "output_tokens": {
                        "N": "{% $string($states.input.Body.usage.output_tokens) %}"
                    }
                }
            },
            "Next": "Send text summary to websocket connection"
        },
        "Send text summary to websocket connection": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Output": "{% $states.result.Payload %}",
            "Arguments": {
                "FunctionName": "${LambdaFunctionArn}",
                "Payload": {
                    "executionArn": "{% $states.context.Execution.Id %}"
                }
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException",
                        "Lambda.TooManyRequestsException"
                    ],
                    "IntervalSeconds": 3,
                    "MaxAttempts": 3,
                    "BackoffRate": 2,
                    "JitterStrategy": "FULL"
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "UnableToAccessDatabaseException",
                        "NoAvailableResultsException"
                    ],
                    "Next": "Fail to connect"
                }
            ],
            "Next": "Start text to speech job"
        },
        "Start text to speech job": {
            "Type": "Task",
            "Arguments": {
                "OutputFormat": "mp3",
                "OutputS3BucketName": "${Bucket_Name}",
                "Text": "{% $summary %}",
                "VoiceId": "Joanna"
            },
            "Resource": "arn:aws:states:::aws-sdk:polly:startSpeechSynthesisTask",
            "Assign": {
                "synthesis_task": "{% $states.result.SynthesisTask %}"
            },
            "Next": "Wait 5 seconds"
        },
        "Wait 5 seconds": {
            "Type": "Wait",
            "Seconds": 5,
            "Next": "Get job status"
        },
        "Get job status": {
            "Type": "Task",
            "Arguments": {
                "TaskId": "{% $synthesis_task.TaskId %}"
            },
            "Resource": "arn:aws:states:::aws-sdk:polly:getSpeechSynthesisTask",
            "Assign": {
                "synthesis_task": "{% $states.result.SynthesisTask %}"
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "BackoffRate": 2,
                    "IntervalSeconds": 1,
                    "MaxAttempts": 3
                }
            ],
            "Next": "Job complete?"
        },
        "Job complete?": {
            "Type": "Choice",
            "Choices": [
                {
                    "Next": "Generate signed s3 audio summary link",
                    "Condition": "{% $synthesis_task.TaskStatus = \"completed\" %}"
                },
                {
                    "Next": "Fail",
                    "Condition": "{% $synthesis_task.TaskStatus = \"failed\" %}"
                }
            ],
            "Default": "Wait 5 seconds"
        },
        "Generate signed s3 audio summary link": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Output": "{% $states.result.Payload %}",
            "Arguments": {
                "FunctionName": "${AudioLink}",
                "Payload": {
                    "inputUri": "{% $synthesis_task.OutputUri %}"
                }
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException",
                        "Lambda.TooManyRequestsException"
                    ],
                    "IntervalSeconds": 1,
                    "MaxAttempts": 3,
                    "BackoffRate": 2,
                    "JitterStrategy": "FULL"
                }
            ],
            "Assign": {
                "signed_s3_link": "{% $states.result.Payload.signed_s3_link %}"
            },
            "Next": "Store audio summary link"
        },
        "Store audio summary link": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:updateItem",
            "Arguments": {
                "TableName": "${TextSummaryTableName}",
                "Key": {
                    "ExecutionArn": {
                        "S": "{% $states.context.Execution.Id %}"
                    }
                },
                "UpdateExpression": "SET AudioSummaryLink = :val1",
                "ExpressionAttributeValues": {
                    ":val1": {
                        "S": "{% $signed_s3_link %}"
                    }
                }
            },
            "Next": "Lambda InvokeSend audio summary link to websocket connection"
        },
        "Lambda InvokeSend audio summary link to websocket connection": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Output": "{% $states.result.Payload %}",
            "Arguments": {
                "FunctionName": "${LambdaFunctionArn}",
                "Payload": {
                    "executionArn": "{% $states.context.Execution.Id %}"
                }
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException",
                        "Lambda.TooManyRequestsException",
                        "UnableToAccessDatabaseException",
                        "NoAvailableResultsException"
                    ],
                    "IntervalSeconds": 3,
                    "MaxAttempts": 3,
                    "BackoffRate": 2,
                    "JitterStrategy": "FULL"
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "UnableToAccessDatabaseException",
                        "NoAvailableResultsException"
                    ],
                    "Next": "Fail to connect"
                }
            ],
            "Next": "Success"
        },
        "Success": {
            "Type": "Succeed"
        },
        "Fail to connect": {
            "Type": "Fail"
        },
        "Fail": {
            "Type": "Fail",
            "Cause": "getSpeechSynthesisTask returned failed status. See TaskStatusReason for details."
        }
    },
    "QueryLanguage": "JSONata"
}